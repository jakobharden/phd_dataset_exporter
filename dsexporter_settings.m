## Create data structure containing the dataset export settings#### FUNCTION SYNOPSIS:#### Usage: [r_ds] = dsexporter_settings()##                   non-interactive mode#### r_ds ... return: export settings data structure, <struct_export_settings>#### see also: dsexporter_substruct.m#### Copyright 2023 Jakob Harden (jakob.harden@tugraz.at, Graz University of Technology, Graz, Austria)## License: MIT## This file is part of the PhD thesis of Jakob Harden.## ## Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated ## documentation files (the “Software”), to deal in the Software without restriction, including without ## limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of ## the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:## ## THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ## THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE ## AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, ## TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.##function [r_ds] = dsexporter_settings()    ## init data structure  r_ds.obj = 'struct_dsexporter_settings';  r_ds.ver = uint16([1, 0]);  r_ds.des = 'Dataset export settings data structure';    ## temporary directory for export files (default, fallback value)  r_ds.dir_tmp_default = fullfile('.', 'tmp');    ## delimiter for CSV files (default, fallback value)  r_ds.delim_csv_default = ',';    ## append time code to file names  ## this is to avoid unwanted overwriting of existing files  r_ds.fn_append_tmcode = false;    ## substructure selection 1: structure paths for main dataset substructures  ## column 1: recognized substructure path (see also: dsexporter_substruct.m)  ## column 2: descriptive name of substructure  ## column 3: substructure path, a cell array containing the path elements  r_ds.struct_paths_1 = {...    "meta_ser", "Metadata, test series", {"meta_ser"}; ...    "meta_set", "Metadata, dataset", {"meta_set"}; ...    "loc", "Locations", {"loc"}; ...    "lic", "Licenses", {"lic"}; ...    "aut", "Authors", {"aut"}; ...    "dev", "Devices", {"dev"}; ...    "mat", "Materials", {"mat"}; ...    "mix", "Mixtures", {"mix"}; ...    "rec", "Recipes", {"rec"}; ...    "spm", "Specimen", {"spm"}; ...    "tst.fpd", "FPD, Fresh paste density test", {"tst", "s01"}; ...    "tst.ssd1", "SSD1, Solid specimen density test, specimen I", {"tst", "s02"}; ...    "tst.ssd2", "SSD2, Solid specimen density test, specimen II", {"tst", "s03"}; ...    "tst.umd1", "UMD1, Ultrasonic measurement distance test, specimen I", {"tst", "s04"}; ...    "tst.umd2", "UMD2, Ultrasonic measurement distance test, specimen II", {"tst", "s05"}; ...    "tst.utt1", "UTT1, Ultrasonic pulse transmission test, compression wave, specimen I", {"tst", "s06"}; ...    "tst.utt2", "UTT2, Ultrasonic pulse transmission test, shear wave, specimen II", {"tst", "s07"}; ...    "tst.tem", "TEM, Specimen temperature test, specimen II", {"tst", "s08"}; ...    "tst.env", "ENV, Environment temperature test", {"tst", "s09"}};    ## substructure selection 2: structure paths for often used dataset substructures  ## column 1: recognized substructure path (see also: dsexporter_substruct.m)  ## column 2: descriptive name of substructure  ## column 3: substructure path, a cell array containing the path elements  r_ds.struct_paths_2 = {...    "meta_ser", "Metadata, test series", {"meta_ser"}; ...    "meta_ser_code", "Metadata, test series code", {"meta_ser"}; ...    "meta_set", "Metadata, dataset", {"meta_set"}; ...    "meta_set_code", "Metadata, dataset code", {"meta_set"}; ...    "loc", "Locations", {"loc"}; ...    "lic", "Licenses", {"lic"}; ...    "aut", "Authors", {"aut"}; ...    "dev", "Devices", {"dev"}; ...    "mat", "Materials", {"mat"}; ...    "mix", "Mixtures", {"mix"}; ...    "rec", "Recipes", {"rec"}; ...    "spm", "Specimen", {"spm"}; ...    "spm1_code", "Specimen I, code", {"spm"}; ...    "spm2_code", "Specimen II, code", {"spm"}; ...    "tst", "Test collection", {"tst"}; ...    "tst.fpd", "FPD, Fresh paste density test", {"tst", "s01"}; ...    "tst.fpd.den", "FPD, density", {"tst", "s01"}; ...    "tst.ssd1", "SSD1, Solid specimen density test, specimen I", {"tst", "s02"}; ...    "tst.ssd1.den", "SSD1, density", {"tst", "s02"}; ...    "tst.ssd2", "SSD2, Solid specimen density test, specimen II", {"tst", "s03"};; ...    "tst.ssd2.den", "SSD2, density", {"tst", "s03"}; ...    "tst.umd1", "UMD1, Ultrasonic measurement distance test, specimen I", {"tst", "s04"}; ...    "tst.umd1.dist", "UMD1, distance", {"tst", "s04"}; ...    "tst.umd2", "UMD2, Ultrasonic measurement distance test, specimen II", {"tst", "s05"}; ...    "tst.umd2.dist", "UMD2, distance", {"tst", "s05"}; ...    "tst.utt1", "UTT1, Ultrasonic pulse transmission test, compression wave, specimen I", {"tst", "s06"}; ...    "tst.utt1.i0", "UTT1, number of samples before trigger point", {"tst", "s06"}; ...    "tst.utt1.t0", "UTT1, zero-time", {"tst", "s06"}; ...    "tst.utt1.mat", "UTT1, maturity array", {"tst", "s06"}; ...    "tst.utt1.ts", "UTT1, sample time signature array", {"tst", "s06"}; ...    "tst.utt1.ms", "UTT1, sample magnitude matrix", {"tst", "s06"}; ...    "tst.utt1.pw", "UTT1, pulse width", {"tst", "s06"}; ...    "tst.utt1.sr", "UTT1, sampling rate", {"tst", "s06"}; ...    "tst.utt2", "UTT2, Ultrasonic pulse transmission test, shear wave, specimen II", {"tst", "s07"}; ...    "tst.utt2.i0", "UTT2, number of samples before trigger point", {"tst", "s07"}; ...    "tst.utt2.t0", "UTT2, zero-time", {"tst", "s07"}; ...    "tst.utt2.mat", "UTT2, maturity array", {"tst", "s07"}; ...    "tst.utt2.ts", "UTT2, sample time signature array", {"tst", "s07"}; ...    "tst.utt2.ms", "UTT2, sample magnitude matrix", {"tst", "s07"}; ...    "tst.utt2.pw", "UTT2, pulse width", {"tst", "s07"}; ...    "tst.utt2.sr", "UTT2, sampling rate", {"tst", "s07"}; ...    "tst.tem", "TEM, Specimen temperature test, specimen II", {"tst", "s08"}; ...    "tst.tem.mat", "TEM, maturity array", {"tst", "s08"}; ...    "tst.tem.t1", "TEM, temperature magnitude array, channel 1", {"tst", "s08"}; ...    "tst.tem.t2", "TEM, temperature magnitude array, channel 2", {"tst", "s08"}; ...    "tst.tem.t3", "TEM, temperature magnitude array, channel 3", {"tst", "s08"}; ...    "tst.tem.t4", "TEM, temperature magnitude array, channel 4", {"tst", "s08"}; ...    "tst.env", "ENV, Environment temperature test", {"tst", "s09"}; ...    "tst.env.tem", "ENV, temperature", {"tst", "s09"}};        ## predefined strings used for column heads when exporting specimen temperature measurement data    r_ds.colh.tem.colidx = '"Signal index"';    r_ds.colh.tem.colmat = '"Maturity"';    r_ds.colh.tem.colt1 = '"Channel t1"';    r_ds.colh.tem.colt2 = '"Channel t2"';    r_ds.colh.tem.colt3 = '"Channel t3"';    r_ds.colh.tem.colt4 = '"Channel t4"';    r_ds.colh.tem.scalunit_ascii = '"[#]"';    r_ds.colh.tem.timeunit_ascii = '"[Seconds]"';    r_ds.colh.tem.tempunit_ascii = '"[°Celsius]"';    r_ds.colh.tem.scalunit_tex = '"[\#]"';    r_ds.colh.tem.timeunit_tex = '"[Seconds]"';    r_ds.colh.tem.tempunit_tex = '"[${}^\circ$ Celsius]"';        ## predefined strings used for column heads when exporting ultrasonic signal data    r_ds.colh.sig.chname = '"Channel name"';    r_ds.colh.sig.chnameunit = '"N/A"';    r_ds.colh.sig.sigidxunit = '"[#]"';    r_ds.colh.sig.sigidx = '"Signal index"';    r_ds.colh.sig.sigidxunit = '"[#]"';    r_ds.colh.sig.matname = '"Maturity"';    r_ds.colh.sig.matunit = '"[Seconds]"';    r_ds.colh.sig.colidx = '"Sample index"';    r_ds.colh.sig.colts = '"Sample time signature"';    r_ds.colh.sig.colmspfx = 'Signal #';    r_ds.colh.sig.idxunit_ascii = '"[#]"';    r_ds.colh.sig.tsunit_ascii = '"[Seconds]"';    r_ds.colh.sig.msunit_ascii = '"[Volts]"';    r_ds.colh.sig.idxunit_tex = '"[\#]"';    r_ds.colh.sig.tsunit_tex = '"[Seconds]"';    r_ds.colh.sig.msunit_tex = '"[Volts]"';  endfunction